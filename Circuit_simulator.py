"""
----Title: Combinational Circuit Simulator Development----
------------Code written by Ayush Gangwar(B20CS008) and Shahzen Khan(B20CS065)---------
--------------Mentored by Dr. Binod Kumar-------------
"""

#CODE->
#importing random module for generating input...
#time module is used to calculate time taken for execution of code..

import random
import time
import pickle

#gates used in file..

# AND gate
def AND(l1):
    l3=[]
    for k in range(len(l1)-1):
        l=[]
        for i in range(len(l1[k])):
            l1[k+1][i]=(l1[k][i] and l1[k+1][i])
    l3=l1[-1]
    return l3

# OR gate
def OR(l1):
    l3=[]
    for k in range(len(l1)-1):
        l=[]
        for i in range(len(l1[k])):
            l1[k+1][i]=(l1[k][i] or l1[k+1][i])
    l3=l1[-1]
    return l3

# NOR gate
def NOR(l1):
    l3=[]
    for k in range(len(l1)-1):
        l=[]
        for i in range(len(l1[k])):
            if(l1[0][k]==0 and l1[1][k]==0):
                l1[k+1][i]= 1
            else:
                l1[k+1][i]= 0
    l3=l1[-1]
    return l3

# NOT gate
def NOT(l1):
    l3=[]
    for k in l1[0]:
        if(k==0):
            l3.append(1)
        else:
            l3.append(0)
    return l3

# NAND gate
def NAND(l1):
    l3=[]
    for k in range(len(l1)-1):
        l=[]
        for i in range(len(l1[k])):
            if(l1[0][k]==1 and l1[1][k]==1):
                l1[k+1][i]= 0 
            else:
                l1[k+1][i]=1
    l3=l1[-1]
    return l3

#XOR gate
def XOR(l1):
    l3=[]
    for k in range(len(l1[0])):
        if(l1[0][k]== l1[1][k]):
            l3.append(0)
        else:
            l3.append(1)
    return l3


def decimalToBinary(n,ni):     #function for converting n to its binary...        
    b = bin(n).replace("0b", "")   # Python bin() function returns the binary string of a given integer...
    return b.zfill(ni)     #zfill pad zeros to a string of size ni...


# open() function opens a file, and returns it as a file object..

def main_run():
    f=open("samplefile2.txt","r")

    start=time.time()   #start will store the initial time while code starts running..
    Input=[]         # Input will store the input lists (here generated by random function)...
    Output=[]        # Output stores the list we get after performing all operations..
    inputindex=[]    # for storing indexes used for imput in file..
    outputindex=[]   # stores indexes used for output in file...

    i=0             # intialising variable for storing max indexe of input given..
    o=0             # intialising variable for storing max index of output required...
    no=0            # stores number of output required...
    ni=0            # stores number of input required.....


    #loop for INPUT lists...

    while(1): 
        s= f.readline()       #readline function returns one line from file as string...
        if(s=="\n"):
            break
        else:
            if("INPUT" in s):
                ni+=1
                d=s.index("(")  
                d+=1
                index=""   
                while(s[d]!=")" and s[d]!=" "):
                    index+=s[d]
                    d+=1

                index=int(index)
                inputindex.append(index-1)
                if(index>i):
                    i=index

    #loop for iterating OUTPUT lists...
    while(1):
        s=f.readline()
        if(s=="\n"):
            break

        else:
            if("OUTPUT" in s):
                no+=1
                d=s.index("(")
                d+=1
                index=""
                while(s[d]!=")" and s[d]!=" "):
                    index+=s[d]
                    d+=1

                index=int(index)
                outputindex.append(index-1)
                if(index>o):
                    o=index     


    for k in range(ni):
        l=[]
        Input.append(l)

    for k in range(no):
        l=[]
        Output.append(l)

        

    list1 = []
    for x in range(0,200):
        x1 = random.randrange(400, 900000,2)    #randrange() method returns a randomly selected element from the specified range
        a=decimalToBinary(x1,ni)
        for element in range(0, len(a)):
            list1.append(int(a[element]))
        pr=0
        for k in list1:
            Input[pr].append(k)
            pr+=1
        list1 = []


    #read remaining lines using readlines..and stores in lines as list..    
    lines=f.readlines()
    LL=[]

    for k in lines:
        LL.append(k)
    le=len(LL)

    Indexesused=[]   #contain all index numbers used for intermediate outputs...
    for i in range(le):
                s=LL[i]
                index=""
                for k in s[ : ]:
                    if(k==" " or k=="="):
                        break

                    else:
                        index+=k
                appendindex=int(index)-1

                if(appendindex not in outputindex and appendindex not in inputindex):
                    if(appendindex not in Indexesused):
                        Indexesused.append(appendindex)
                    
                d=len(s)
                pr=s.index("(")
                pr+=1
                while(pr<d):
                    if(s[pr]==")"):
                        break

                    elif(s[pr]==" " or s[pr]==","):
                        pr+=1
                        pass

                    else:
                        index=""
                        while(s[pr]!="," and s[pr]!=")" and s[pr]!=" "):
                            index+=s[pr]
                            pr+=1
                        index=int(index)-1

                        if((index not in outputindex) and (index not in inputindex)):
                            if(index not in Indexesused):
                                Indexesused.append(index)
        
    Indexesused.sort()

    ref=Indexesused[0]    #reference index for intermediate inputs....
    reo=Indexesused[-1]   
    reou=outputindex[0]   #reference index used for Output..
    L=[]                  #for storing interemediate output...
    visited=[]                 #visited lists...
    #initialising all values of L and visited by 1..
    for k in range(reo+1):
        L.append(1)
        visited.append(1)

    for i in range(ref,reo+1):
        if(i in Indexesused):
            L[i]=-1         #L[i]==-1 if we had not visit that index yet..
            visited[i]=-1

        else:
            L[i]=1     

    # main algorithm for getting all output and intermediate outputs of files...
    while(1):

        if(sum(visited[ : ])==no+len(L)):
            break             #break when all indexes will visited...

        else:
            for i in range(le):  
                count=0
                operationlist=[]   #stores all lists used in a gate operation.
                s=LL[i]
                index=""
                for k in s[ : ]:
                    if(k==" " or k=="="):
                        break

                    else:
                        index+=k

                appendindex=int(index)-1   #appendindex is index of output of gate operation. 
                
                br=s.index("=")
                gate=""       #gate used in that operation.
                for k in s[br+1: ]:
                    if(k=="("):
                        break

                    elif(k==" "):
                        pass

                    else:
                        gate+=k
                if(appendindex in Indexesused):    #if output is of intermediate type..
                    #algo for iterating operative string.
                    d=len(s)
                    pr=s.index("(")
                    pr+=1
                    while(pr<d):
                        if(s[pr]==")"):
                            break

                        elif(s[pr]==" " or s[pr]==","):
                            pr+=1
                            pass

                        else:
                            index=""
                            while(s[pr]!="," and s[pr]!=")" and s[pr]!=" "):
                                index+=s[pr]
                                pr+=1
                            index=int(index)-1

                            if(index in inputindex):
                                operationlist.append(Input[index])

                            elif(index in Indexesused):
                                if(L[index]==-1):
                                    count+=1

                                else:
                                    operationlist.append(L[index])

    #call of respective gates if we have all index as needed..                        
                    if(count==0):
                        visited[appendindex]=1  #make index visited by replacing -1 to 1.

                        if(gate=="AND"):
                            Li=list(AND(operationlist))
                            L[appendindex]=Li

                        elif(gate=="OR"):
                            Li=OR(operationlist)
                            L[appendindex]=Li

                        elif(gate=="NOR"):
                            Li=NOR(operationlist)
                            L[appendindex]=Li

                        elif(gate=="NOT"):
                            Li=NOT(operationlist)
                            L[appendindex]=Li

                        elif(gate=="NAND"):
                            Li=NAND(operationlist)
                            L[appendindex]=Li
                        
                        elif(gate=="XOR"):
                            Li=NAND(operationlist)
                            L[appendindex]=Li

                    else:
                        pass

                elif(appendindex in outputindex): #if output is of final output we needed..
                    #iterating string..
                    d=len(s)
                    pr=s.index("(")
                    pr+=1
                    while(pr<d):
                        if(s[pr]==")"):
                            break

                        elif(s[pr]==" " or s[pr]==","):
                            pr+=1
                            pass

                        else:
                            index=""
                            while(s[pr]!="," and s[pr]!=")" and s[pr]!=" "):
                                index+=s[pr]
                                pr+=1
                            index=int(index)-1

                            if(index in inputindex):
                                operationlist.append(Input[index])

                            elif(index in Indexesused):
                                if(L[index]==-1):
                                    count+=1

                                else:
                                    operationlist.append(L[index])

    #call of particular gates..

                    if(count==0):   #if all indexes needed in operation are visited.
                        visited.append(1)
                        if(gate=="AND"):
                            Li=list(AND(operationlist))
                            Output[appendindex-reou]=Li

                        elif(gate=="OR"):
                            Li=OR(operationlist)
                            Output[appendindex-reou]=Li

                        elif(gate=="NOR"):
                            Li=NOR(operationlist)
                            Output[appendindex-reou]=Li

                        elif(gate=="NOT"):
                            Li=NOT(operationlist)
                            Output[appendindex-reou]=Li

                        elif(gate=="NAND"):
                            Li=NAND(operationlist)
                            Output[appendindex-reou]=Li
                        
                        elif(gate=="XOR"):
                            Li=NAND(operationlist)
                            L[appendindex]=Li

                    else:
                        pass

                else:
                    pass

    # algo ended...and we have all Output in Output list..

    end=time.time()   #end will stores the time when codes ended..

# Totaltime=end-start  #time taken by code to run..
    input_file=open("Input.txt","w")
    for k in range(len(Input)):
        input_file.write(str(Input[k]))
        input_file.write("\n")
    input_file.close()
    
    output_file=open("output.txt","w")
    for k in range(len(Output)):
        output_file.write(str(Output[k]))
        output_file.write("\n")
    output_file.close()
    
    return outputindex,inputindex
# print(Totaltime)
# "Input"+str(inputindex[k]+1)+":"+